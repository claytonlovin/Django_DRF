# Generated by Django 4.1.3 on 2022-11-20 05:50

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="TbGrupo",
            fields=[
                (
                    "id_grupo",
                    models.AutoField(
                        db_column="ID_GRUPO", primary_key=True, serialize=False
                    ),
                ),
                (
                    "nome_do_grupo",
                    models.CharField(db_column="NOME_DO_GRUPO", max_length=20),
                ),
                (
                    "data_criacao",
                    models.DateTimeField(
                        blank=True, db_column="DATA_CRIACAO", null=True
                    ),
                ),
                (
                    "fl_ativo",
                    models.IntegerField(blank=True, db_column="FL_ATIVO", null=True),
                ),
            ],
            options={
                "db_table": "tb_grupo",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TbGrupoUsuario",
            fields=[
                (
                    "id_grupo_usuario",
                    models.AutoField(
                        db_column="ID_GRUPO_USUARIO", primary_key=True, serialize=False
                    ),
                ),
            ],
            options={
                "db_table": "tb_grupo_usuario",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TbOrganizacao",
            fields=[
                (
                    "id_organizacao",
                    models.AutoField(
                        db_column="ID_ORGANIZACAO", primary_key=True, serialize=False
                    ),
                ),
                (
                    "nome_organizacao",
                    models.CharField(db_column="NOME_ORGANIZACAO", max_length=100),
                ),
                ("data_criacao", models.DateField(db_column="DATA_CRIACAO")),
                (
                    "fl_ativo",
                    models.IntegerField(blank=True, db_column="FL_ATIVO", null=True),
                ),
            ],
            options={
                "db_table": "tb_organizacao",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TbRelatorio",
            fields=[
                (
                    "id_relatorio",
                    models.AutoField(
                        db_column="ID_RELATORIO", primary_key=True, serialize=False
                    ),
                ),
                (
                    "ds_nome_relatorio",
                    models.CharField(db_column="DS_NOME_RELATORIO", max_length=100),
                ),
                (
                    "ds_link_relatorio",
                    models.CharField(db_column="DS_LINK_RELATORIO", max_length=1024),
                ),
            ],
            options={
                "db_table": "tb_relatorio",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="TbUsuario",
            fields=[
                (
                    "id_usuario",
                    models.AutoField(
                        db_column="ID_USUARIO", primary_key=True, serialize=False
                    ),
                ),
                (
                    "nome_usuario",
                    models.CharField(
                        db_column="NOME_USUARIO", max_length=100, unique=True
                    ),
                ),
                (
                    "ds_telefone",
                    models.CharField(
                        db_column="DS_TELEFONE", max_length=15, unique=True
                    ),
                ),
                (
                    "ds_email",
                    models.CharField(db_column="DS_EMAIL", max_length=100, unique=True),
                ),
                (
                    "ds_login",
                    models.CharField(db_column="DS_LOGIN", max_length=30, unique=True),
                ),
                (
                    "ds_senha",
                    models.CharField(db_column="DS_SENHA", max_length=30, unique=True),
                ),
                (
                    "fl_administrador",
                    models.IntegerField(
                        blank=True, db_column="FL_ADMINISTRADOR", null=True
                    ),
                ),
            ],
            options={
                "db_table": "tb_usuario",
                "managed": False,
            },
        ),
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=50)),
                ("description", models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("telefone", models.CharField(max_length=11)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
